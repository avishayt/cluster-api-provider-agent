// Code generated by MockGen. DO NOT EDIT.
// Source: remote_client.go

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRemoteClientHandler is a mock of RemoteClientHandler interface.
type MockRemoteClientHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteClientHandlerMockRecorder
}

// MockRemoteClientHandlerMockRecorder is the mock recorder for MockRemoteClientHandler.
type MockRemoteClientHandlerMockRecorder struct {
	mock *MockRemoteClientHandler
}

// NewMockRemoteClientHandler creates a new mock instance.
func NewMockRemoteClientHandler(ctrl *gomock.Controller) *MockRemoteClientHandler {
	mock := &MockRemoteClientHandler{ctrl: ctrl}
	mock.recorder = &MockRemoteClientHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteClientHandler) EXPECT() *MockRemoteClientHandlerMockRecorder {
	return m.recorder
}

// GetRemoteClient mocks base method.
func (m *MockRemoteClientHandler) GetRemoteClient(ctx context.Context, secretNamespace string) (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteClient", ctx, secretNamespace)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteClient indicates an expected call of GetRemoteClient.
func (mr *MockRemoteClientHandlerMockRecorder) GetRemoteClient(ctx, secretNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteClient", reflect.TypeOf((*MockRemoteClientHandler)(nil).GetRemoteClient), ctx, secretNamespace)
}
